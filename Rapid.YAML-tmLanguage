# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Rapid
scopeName: source.rapid
fileTypes: [rc, rh]
uuid: cd4e6b22-a322-4771-8eef-91166b808f3d

patterns:
- include: '#comments'
- include: '#variables'
- include: '#numbers'
- include: '#string'
- include: '#char'
- include: '#storage'
- include: '#storageSize'
#- include: '#enum'
#- include: '#functionPrototype'
- include: '#scopeLimit'
- include: '#compilerCode'
- include: '#directives'
- include: '#builtinTypes'
- name: keyword.control.source.rapid
  match: (\b(if|else|elif|while|for|switch|match|return|break|continue|defer)\b)
- name: keyword.other.memory.source.rapid
  match: (\b(new|delete|soa|aos)\b)
- name: keyword.other.misc.source.rapid
  match: (\b(use|import|inline)\b)
- name: storage.modifier.rapid
  match: (\b(readonly|writeonly)\b)
- name: constant.language.source.rapid
  match: (\b(true|false|null)\b)
- include: '#attributes'

repository:

  builtinTypes:
    patterns:
    - name: storage.type.integer.source.rapid
      match: (\b(bool|i8|i16|i32|i64|u8|u16|u32|u64)\b)
    - name: storage.type.float.source.rapid
      match: (\b(half|float|double|[hfd]vec[234]|[hfd]mat44|[hfd]mat43|[hfd]mat22)\b)
    - name: storage.type.misc.source.rapid
      match: (\b(void|uchar|string)\b)
    - name: storage.type.auto.source.rapid
      match: (\b(auto|any|fn|function|dl|delegate|op|operator)\b)

  comments:
    patterns:
    - name: comment.line.double-slash.source.rapid
      match: ((//).*$\n?)
      captures:
        '1': {name: punctuation.definition.comment.source.rapid}
    - name: comment.block.source.rapid
      begin: /\*
      captures:
        '0': {name: punctuation.definition.comment.source.rapid}
      end: \*/\n?
      patterns:
      - include: '#comments'

  numbers:
    patterns:
    - name: constant.numeric.float.source.rapid
      match: ((\b|-)[0-9_]+\.[0-9_]+(e\-[0-9]+)?)
    - name: constant.numeric.integer.source.rapid
      match: ((\b|-)[0-9_]+([ul]{1,2})?\b)
    - name: constant.numeric.hex.source.rapid
      match: (\b0x[\dA-Fa-f_]+\b)
    - name: constant.numeric.binary.source.rapid
      match: (\b0b(0|1)+\b)

  variables:
    name: meta.definition.struct.source.rapid
    match: (\b[A-Za-z0-9_]+)\s*([:])\s*([#]?[A-Za-z0-9_]+\b)
    captures:
      '1': {name: variable.source.rapid}
      '2': {name: storage.modifier.source.rapid}
      '3': {name: storage.type.source.rapid}

  storage:
    name: meta.definition.storage.source.rapid
    match: (?x)^\s*(module|struct|alias)\s+([A-Za-z0-9_]+)\b
    captures:
      '1': {name: storage.type.storage.source.rapid}
      '2': {name: entity.name.type.storage.source.rapid}

  storageSize:
    name: meta.definition.enum.source.rapid
    match: (?x)^\s*(enum|bits)\s+([A-Za-z0-9_.]+)\s+([A-Za-z0-9_]+)\b
    captures:
      '1': {name: storage.type.source.rapid}
      '2': {name: storage.type.source.rapid}
      '3': {name: entity.name.type.storage.source.rapid}

  functionPrototype:
    name: meta.definition.function.prototype.source.rapid
    patterns:
    - match: (?<=\w)(?:[\t ]+)((\.?[A-Za-z0-9_]+)+)\(
      captures:
        '1': {name: entity.name.type.function.source.rapid}

  string:
    name: string.quoted.double.source.rapid
    begin: (\")
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.source.rapid}
    end: (\")
    endCaptures:
      '1': {name: punctuation.definition.string.end.source.rapid}
    patterns:
    - match: (\\.)
      name: punctuation.definition.string
      # name: constant.character.escape.source.rapid

  char:
    name: string.quoted.single.source.rapid
    begin: (')
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.source.rapid}
    end: (')
    endCaptures:
      '1': {name: punctuation.definition.string.end.source.rapid}

  attributes:
    patterns:
    - name: meta.definition.attribute.source.rapid
      match: (@[A-Za-z]+\()([A-Za-z0-9_., ]+)(\))
      captures:
        '1': {name: entity.other.attribute-name.source.rapid}
        '2': {name: entity.other.attribute-name.value.source.rapid}
        '3': {name: entity.other.attribute-name.source.rapid}
    - name: entity.other.attribute-name.source.rapid
      match: (@[A-Za-z]+)

  directives:
    patterns:
    - name: entity.other.directive-name.source.rapid
      match: (#(intrinsic|todo|assert|error|warning|deprecated))

  scopeLimit:
    patterns:
    - match: (\[(\s*[A-Za-z0-9_]+,?)*\s*\])(?:\s*\{)
      captures:
        '1': {name: meta.tag.source.rapid}
    - match: (?:\))\s(\[(\s*[A-Za-z0-9_]+,?)*\s*\])(?:\s*(\b|\;))
      captures:
        '1': {name: meta.tag.source.rapid}

  compilerCode:
    name: entity.other.attribute-name
    begin: (##)
    end: (##)

...